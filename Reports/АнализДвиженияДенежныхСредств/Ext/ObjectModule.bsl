
#Область СлужебныеПроцедурыИФункции

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	Функция ПолучитьПредопределенныйЭлементПользовательскихНастроек(ЭлементНастроекВарианта, ПользовательскиеНастройки) 
		НайденныйЭлемент = Неопределено;
		Если ЭлементНастроекВарианта <> Неопределено Тогда
			НайденныйЭлемент = ПользовательскиеНастройки.Элементы.Найти(ЭлементНастроекВарианта.ИдентификаторПользовательскойНастройки);
		КонецЕсли;
		Возврат НайденныйЭлемент;
	КонецФункции
#Иначе
	ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
		СтандартнаяОбработка = Ложь;
		
		ТЗОборотовИз77 = Новый ТаблицаЗначений;
		ТЗОборотовИз77.Колонки.Добавить("ПриходРасход");
		ТЗОборотовИз77.Колонки.Добавить("ДебетСубконто1");
		ТЗОборотовИз77.Колонки.Добавить("ДебетСубконто2");
		ТЗОборотовИз77.Колонки.Добавить("ДебетСубконто3");
		ТЗОборотовИз77.Колонки.Добавить("КредитСубконто1");
		ТЗОборотовИз77.Колонки.Добавить("КредитСубконто2");
		ТЗОборотовИз77.Колонки.Добавить("КредитСубконто3");
		ТЗОборотовИз77.Колонки.Добавить("ДатаПроводки");
		ТЗОборотовИз77.Колонки.Добавить("Сумма");
		
		НачДата = ПолучитьПользовательскийПараметр("ДатаНачала", КомпоновщикНастроек).Значение.Дата;
		КонДата = ПолучитьПользовательскийПараметр("ДатаОкончания", КомпоновщикНастроек).Значение.Дата;
		
		База = Неопределено;
		РезультатПодключения = Неопределено;
		ОбщегоНазначенияСервер.ПодключениеК1С77(База, РезультатПодключения);
		Если НЕ РезультатПодключения Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "НЕ ПОДКЛЮЧИЛИСЬ К 1С 7.7";
			Сообщение.Сообщить(); 
			Возврат;
		КонецЕсли;
		
		БИ = База.CreateObject("БухгалтерскиеИтоги");
		СубконтоБанковскихСчетов = База.ВидыСубконто.БанковскиеСчета;
		СубконтоЦелевогоНазначения = База.ВидыСубконто.ЦелевоеНазначение;
		БИ.ИспользоватьСубконто(СубконтоБанковскихСчетов);
		БИ.ИспользоватьСубконто(СубконтоЦелевогоНазначения);
		Счет51 = База.CreateObject("Счет");
		Счет51.НайтиПоКоду("51");
		БИ.ВыполнитьЗапрос(НачДата, КонДата, Счет51, "", "", "", "Проводка", "С");
		БИ.ВыбратьПериоды();
		Пока БИ.ПолучитьПериод()=1 Цикл
			
			
			СтрокаТЗ = ТЗОборотовИз77.Добавить();
			Если БИ.Операция.Дебет.Счет.Код = "51" И БИ.Операция.Кредит.Счет.Код = "51" Тогда
				СтрокаТЗ.ПриходРасход = НСтр("ru='Движение между собственными счетами'");
			ИначеЕсли БИ.Операция.Дебет.Счет.Код = "51" И БИ.Операция.Кредит.Счет.Код <> "51" Тогда
				СтрокаТЗ.ПриходРасход = НСтр("ru='Поступление денежных средств'");
			ИначеЕсли БИ.Операция.Дебет.Счет.Код <> "51" И БИ.Операция.Кредит.Счет.Код = "51" Тогда
				СтрокаТЗ.ПриходРасход = НСтр("ru='Списание денежных средств'");
			КонецЕсли; 
			
			
			ДтСчет = БИ.Операция.Дебет.Счет;
			Для А=1 По 3 Цикл
				Если БИ.Операция.Дебет.Счет.КоличествоСубконто() > А-1 Тогда
					ИмяКолонки = "ДебетСубконто" + Строка(А);
					СтрокаТЗ[ИмяКолонки]= БИ.Операция.Дебет.ПредставлениеСубконто(А);
				Иначе
					ИмяКолонки = "ДебетСубконто" + Строка(А);
					СтрокаТЗ[ИмяКолонки] = "+";
				КонецЕсли;			
			КонецЦикла;
			
			КтСчет = БИ.Операция.Кредит.Счет;
			Для А=1 По 3 Цикл
				Если БИ.Операция.Кредит.Счет.КоличествоСубконто() > А-1 Тогда
					ИмяКолонки = "КредитСубконто" + Строка(А);
					СтрокаТЗ[ИмяКолонки]= БИ.Операция.Кредит.ПредставлениеСубконто(А);
				Иначе
					ИмяКолонки = "КредитСубконто" + Строка(А);
					СтрокаТЗ[ИмяКолонки] = "+";
				КонецЕсли;			
			КонецЦикла;
			
			СтрокаТЗ.Сумма = БИ.Операция.Сумма;
			СтрокаТЗ.ДатаПроводки = БИ.Операция.ДатаОперации;				
			
			
		КонецЦикла;
		
		База = NULL;
		
		СхемаКомпоновкиДанных = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
		Настройки = КомпоновщикНастроек.ПолучитьНастройки(); 
		ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных; 
		
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;	
		МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);	
		
		ВнешнийНаборДанных = Новый Структура("ТЗОборотовИз77", ТЗОборотовИз77); 
		ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных; 
		ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешнийНаборДанных, ДанныеРасшифровки); 
		
		ДокументРезультат.Очистить();
		
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент; 
		ПроцессорВывода.УстановитьДокумент(ДокументРезультат); 
		ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
		
		
	КонецПроцедуры
#Иначе
	ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	Функция ПолучитьПользовательскийПараметр(ИмяПараметра, КомпоновщикНастроек)
		НайденныйПараметр = Неопределено;
		НайденныйПараметрВарианта = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти(ИмяПараметра);
		Если НайденныйПараметрВарианта <> Неопределено Тогда
			НайденныйПараметр = ПолучитьПредопределенныйЭлементПользовательскихНастроек(НайденныйПараметрВарианта, КомпоновщикНастроек.ПользовательскиеНастройки);
		КонецЕсли;
		Возврат НайденныйПараметр;
	КонецФункции
#Иначе
	ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли

#КонецОбласти