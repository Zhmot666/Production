
#Область ОбработчикиСобытий

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	Функция ОбработкаСуммыКоличества(Ссылка)
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА(ПроизводствоЭтапыПроизводства.КоличествоВыпуска) КАК КоличествоВыпуска
		|ИЗ
		|	Документ.Производство.ЭтапыПроизводства КАК ПроизводствоЭтапыПроизводства
		|ГДЕ
		|	ПроизводствоЭтапыПроизводства.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка" , Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Если ВыборкаДетальныеЗаписи.КоличествоВыпуска = NULL Тогда
				Возврат 0;
			Иначе 
				Возврат ВыборкаДетальныеЗаписи.КоличествоВыпуска;
			КонецЕсли;
		КонецЦикла;
		
	КонецФункции
	
	
	Функция ПроверкаКоличестваКонтрольныхЗнаков(КонтрольныеЗнаки, СырьеИМатериалы)
		
		ЕстьКЗ = Ложь;
		КоличествоКЗ = 0;
		СправочникКонтрольЗнаки = Справочники.Номенклатура.НайтиПоНаименованию("Контрольные знаки").Ссылка;
		Для каждого Материал Из СырьеИМатериалы Цикл
			Если Материал.Номенклатура = СправочникКонтрольЗнаки Тогда
				ЕстьКЗ = Истина;
				КоличествоКЗ = КоличествоКЗ + Материал.Количество;
			КонецЕсли;
		КонецЦикла;
		Если Не ЕстьКЗ Тогда
			Возврат "Не содержит КЗ";
		КонецЕсли;
		Если КоличествоКЗ < КонтрольныеЗнаки.Итог("Количество") Тогда
			Возврат "Контрольных знаков внесено больше чем в материалах";
		ИначеЕсли КоличествоКЗ > КонтрольныеЗнаки.Итог("Количество") Тогда
			Возврат "Контрольных знаков внесено меньше чем в материалах";
		КонецЕсли; 
		
		Возврат "Все ОК";
		
	КонецФункции // ПроверкаКоличестваКонтрольныхЗнаков()
	
	
	Функция ПроверкаНаличияКонтрольныхЗнаков(ТЗКонтрольныхЗнаков)
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТЗКонтрольныхЗнаков.Номер КАК Номер,
		|	ТЗКонтрольныхЗнаков.Серия КАК Серия
		|ПОМЕСТИТЬ ТЗКонтрольныхЗнаков
		|ИЗ
		|	&ТЗКонтрольныхЗнаков КАК ТЗКонтрольныхЗнаков
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОстаткиКЗСрезПоследних.Серия КАК Серия,
		|	ОстаткиКЗСрезПоследних.Номер КАК Номер,
		|	ОстаткиКЗСрезПоследних.Состояние КАК Состояние
		|ИЗ
		|	РегистрСведений.ОстаткиКЗ.СрезПоследних(&ДатаСреза, ) КАК ОстаткиКЗСрезПоследних
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТЗКонтрольныхЗнаков КАК ТЗКонтрольныхЗнаков
		|		ПО ОстаткиКЗСрезПоследних.Номер = ТЗКонтрольныхЗнаков.Номер
		|			И ОстаткиКЗСрезПоследних.Серия = ТЗКонтрольныхЗнаков.Серия";
		
		Запрос.УстановитьПараметр("ДатаСреза", Дата);
		Запрос.УстановитьПараметр("ТЗКонтрольныхЗнаков", ТЗКонтрольныхЗнаков);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		СчетчикНайденных = 0;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СчетчикНайденных = СчетчикНайденных + 1;
		КонецЦикла;
		Возврат СчетчикНайденных;
		
	КонецФункции // ПроверкаНаличияКонтрольныхЗнаков()
	
	
	Функция ПроверкаПовторногоИспользованияКонтрольныхЗнаков(ТЗКонтрольныхЗнаков)
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТЗКонтрольныхЗнаков.Номер КАК Номер,
		|	ТЗКонтрольныхЗнаков.Серия КАК Серия
		|ПОМЕСТИТЬ ТЗКонтрольныхЗнаков
		|ИЗ
		|	&ТЗКонтрольныхЗнаков КАК ТЗКонтрольныхЗнаков
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОстаткиКЗСрезПоследних.Серия КАК Серия,
		|	ОстаткиКЗСрезПоследних.Номер КАК Номер,
		|	ОстаткиКЗСрезПоследних.Состояние КАК Состояние
		|ИЗ
		|	РегистрСведений.ОстаткиКЗ.СрезПоследних(&ДатаСреза, ) КАК ОстаткиКЗСрезПоследних
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТЗКонтрольныхЗнаков КАК ТЗКонтрольныхЗнаков
		|		ПО ОстаткиКЗСрезПоследних.Номер = ТЗКонтрольныхЗнаков.Номер
		|			И ОстаткиКЗСрезПоследних.Серия = ТЗКонтрольныхЗнаков.Серия
		|ГДЕ
		|	ОстаткиКЗСрезПоследних.Состояние <> &Состояние";
		
		Запрос.УстановитьПараметр("ДатаСреза", Дата);
		Запрос.УстановитьПараметр("Состояние", ПредопределенноеЗначение("Перечисление.ДвижениеКонтрольныхЗнаков.Поступление"));
		Запрос.УстановитьПараметр("ТЗКонтрольныхЗнаков", ТЗКонтрольныхЗнаков);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Возврат Ложь;
		КонецЦикла;
		Возврат Истина;
		
	КонецФункции	
	
	
	Функция ПроверкаКонтрольныхЗнаков()
		
		// Формирование ТЗ контрольных знаков
		ТЗКонтрольныхЗнаков = Новый ТаблицаЗначений;
		ТЗКонтрольныхЗнаков.Колонки.Добавить("Серия", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(3)));
		ТЗКонтрольныхЗнаков.Колонки.Добавить("Номер", Новый ОписаниеТипов("Число"));
		Для Каждого ТекСтрокаКонтрольныеЗнаки Из КонтрольныеЗнаки Цикл
			Для НомерКонтрольногоЗнака = ТекСтрокаКонтрольныеЗнаки.НачальныйНомер По ТекСтрокаКонтрольныеЗнаки.КонечныйНомер Цикл
				СтрокаТЗК = ТЗКонтрольныхЗнаков.Добавить();
				СтрокаТЗК.Серия = ТекСтрокаКонтрольныеЗнаки.Серия;
				СтрокаТЗК.Номер = НомерКонтрольногоЗнака;
			КонецЦикла; 
		КонецЦикла;
		
		Движения.ОстаткиКЗ.Записывать = Истина;
		ИтогПроверкиТаблицыКЗ = ПроверкаКоличестваКонтрольныхЗнаков(КонтрольныеЗнаки, СырьеИМатериалы);
		Если ИтогПроверкиТаблицыКЗ <> "Не содержит КЗ" и ИтогПроверкиТаблицыКЗ <> "Все ОК" Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Ошибка заполнения таблицы контрольных знаков. " + ИтогПроверкиТаблицыКЗ;
			Сообщение.Сообщить();
			Возврат Истина;
		КонецЕсли; 
		
		НайденоКЗВБазе = ПроверкаНаличияКонтрольныхЗнаков(ТЗКонтрольныхЗнаков);
		Если НайденоКЗВБазе < КонтрольныеЗнаки.Итог("Количество") Тогда 
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Несколько (" + Строка(КонтрольныеЗнаки.Итог("Количество") - НайденоКЗВБазе) +  ") контрольных знаков не найдено в базе";
			Сообщение.Сообщить();
			Возврат Истина;
		КонецЕсли;
		
		Если Не ПроверкаПовторногоИспользованияКонтрольныхЗнаков(ТЗКонтрольныхЗнаков) Тогда 
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Найдено повторное использование контрольных знаков";
			Сообщение.Сообщить();
			Возврат Истина;
		КонецЕсли;
		Возврат Ложь;
	КонецФункции
	
	
	
	Процедура ОбработкаПроведения(Отказ, Режим)
		
		Для Каждого СтрокаМатериалов Из СырьеИМатериалы Цикл
			Если СтрокаМатериалов.Номенклатура.Наименование = "Контрольные знаки" Тогда
				Прерыватель = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если КонтрольныеЗнаки.Количество() <> 0 и Не Прерыватель Тогда
			// регистр ОстаткиКЗ
			Если СписыватьКЗ Тогда
				Отказ =  ПроверкаКонтрольныхЗнаков();
				Для Каждого ТекСтрокаКонтрольныеЗнаки Из КонтрольныеЗнаки Цикл
					Для НомерКонтрольногоЗнака = ТекСтрокаКонтрольныеЗнаки.НачальныйНомер По ТекСтрокаКонтрольныеЗнаки.КонечныйНомер Цикл
						Движение = Движения.ОстаткиКЗ.Добавить();
						Движение.Период = Дата;
						Движение.Серия = ТекСтрокаКонтрольныеЗнаки.Серия;
						Движение.Номер = НомерКонтрольногоЗнака;
						Движение.Состояние = ТекСтрокаКонтрольныеЗнаки.ПричинаСписания;
						Движение.Продукция = ВидПродукции;
						Движение.Комментарий = Комментарий;
					КонецЦикла; 
				КонецЦикла;
			КонецЕсли; 
		КонецЕсли;
		
		// регистр Остатки Приход
		Движения.Остатки.Записывать = Истина;
		Для Каждого ТекСтрокаЭтапыПроизводства Из ЭтапыПроизводства Цикл
			Движение = Движения.Остатки.Добавить();
			Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
			Движение.Период = Дата;
			Движение.Номенклатура = ВидПродукции;
			Движение.Склад = СкладПоступленияПродукции;
			Движение.Количество = ТекСтрокаЭтапыПроизводства.КоличествоВыпуска;
			Если ВидПродукции.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Материалы ИЛИ ВидПродукции.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Сырье ИЛИ ВидПродукции.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Полуфабрикаты Тогда
				
			Иначе
				Если ДляМасла И Не ДатаРозлива = '00010101000000' Тогда
					Движение.ДатаВыпуска = ДатаРозлива;
				Иначе 
					Движение.ДатаВыпуска = Дата;
				КонецЕсли; 
				Движение.НомерПартии = НомерПартии;
			КонецЕсли;
			
		КонецЦикла;
		
		// регистр Остатки Расход
		Движения.Остатки.Записывать = Истина;
		Для Каждого ТекСтрокаСырьеИМатериалы Из СырьеИМатериалы Цикл
			Движение = Движения.Остатки.Добавить();
			Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
			Движение.Период = Дата;
			Движение.Номенклатура = ТекСтрокаСырьеИМатериалы.Номенклатура;
			Движение.Склад = СкладСписанияСырья;
			Движение.Количество = ТекСтрокаСырьеИМатериалы.Количество;
		КонецЦикла;
		
		// регистр Остатки Приход
		Движения.Остатки.Записывать = Истина;
		Для Каждого ТекСтрокаВозвратныеОтходы Из ВозвратныеОтходы Цикл
			Движение = Движения.Остатки.Добавить();
			Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
			Движение.Период = Дата;
			Движение.Номенклатура = ТекСтрокаВозвратныеОтходы.Наименование;
			Движение.Склад = СкладСписанияСырья;
			Движение.Количество = ТекСтрокаВозвратныеОтходы.Количество;
		КонецЦикла;
		
		#Если Не МобильноеПриложениеСервер Тогда
			// регистр Управленческий 
			Движения.Управленческий.Записывать = Истина;
			Для Каждого ТекСтрокаСырьеИМатериалы Из СырьеИМатериалы Цикл
				Движение = Движения.Управленческий.Добавить();
				Движение.СчетДт = ПланыСчетов.Основной.ОсновноеПроизводство;
				Движение.СчетКт = ПланыСчетов.Основной.СырьеИМатериалы;
				Движение.Период = Дата;
				Движение.КоличествоКт = ТекСтрокаСырьеИМатериалы.Количество;
				Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.Номенклатура] = ТекСтрокаСырьеИМатериалы.Номенклатура;
				Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.МестаХранения] = СкладСписанияСырья;
				Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.Сотрудники] = СкладСписанияСырья;
			КонецЦикла;
			
			// регистр Управленческий 
			Движения.Управленческий.Записывать = Истина;
			Для Каждого ТекСтрокаЭтапыПроизводства Из ЭтапыПроизводства Цикл
				Движение = Движения.Управленческий.Добавить();
				Движение.СчетДт = ПланыСчетов.Основной.ГотоваяПродукция;
				Движение.СчетКт = ПланыСчетов.Основной.ОсновноеПроизводство;
				Движение.Период = Дата;
				Движение.КоличествоДт = ТекСтрокаЭтапыПроизводства.КоличествоВыпуска;
				Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.Номенклатура] = ВидПродукции;
				Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.МестаХранения] = СкладПоступленияПродукции;
			КонецЦикла;
		#КонецЕсли
		
		Если ОбработкаСуммыКоличества(Ссылка) >= ПланируемоеКоличество Тогда
			Статус = Перечисления.СтатусПроизводства.Окончено;
		ИначеЕсли Статус = Перечисления.СтатусПроизводства.Запланировано Тогда
			Статус = Перечисления.СтатусПроизводства.Запланировано;
		Иначе 
			Статус = Перечисления.СтатусПроизводства.Начато;
		КонецЕсли;
		
		// регистр СведенияОИсследованиях
		Движения.СведенияОИсследованиях.Записывать = Истина;
		Движение = Движения.СведенияОИсследованиях.Добавить();
		Движение.ВыпускПродукции = Ссылка;
		Если ВидПродукции.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Продукция Тогда 
			Движение.СтсатусИспытаний = ОбщегоНазначенияСервер.ОпредлениеСтатусаИсследований(Движение.Арбитраж, Движение.Органолептика, Движение.ПротоколИспытаний);
		Иначе
			Движение.СтсатусИспытаний = Перечисления.СтатусИспытаний.НеТребуются;
		КонецЕсли;
		Движение.Комментарий = Комментарий;
		
		//Записать();			
	КонецПроцедуры
	
#Иначе
	ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли

#КонецОбласти

