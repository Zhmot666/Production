
#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаСервере
Функция ВидПродукцииПриИзмененииНаСервере(ДатаДок, ПродДок)
	Запрос = Новый Запрос;
	
	Запрос.Текст = 	"ВЫБРАТЬ
	               	|	НормыРасходаСрезПоследних.Продукция КАК Продукция,
	               	|	НормыРасходаСрезПоследних.Материал КАК Материал,
	               	|	НормыРасходаСрезПоследних.Количество КАК Количество
	               	|ИЗ
	               	|	РегистрСведений.НормыРасхода.СрезПоследних(&ДатаДок, ) КАК НормыРасходаСрезПоследних
	               	|ГДЕ
	               	|	НормыРасходаСрезПоследних.Продукция = &ПродДок
	               	|
	               	|СГРУППИРОВАТЬ ПО
	               	|	НормыРасходаСрезПоследних.Продукция,
	               	|	НормыРасходаСрезПоследних.Материал,
	               	|	НормыРасходаСрезПоследних.Количество
	               	|
	               	|УПОРЯДОЧИТЬ ПО
	               	|	НормыРасходаСрезПоследних.Материал.Наименование";
	
	Запрос.УстановитьПараметр("ПродДок", ПродДок);
	Запрос.УстановитьПараметр("ДатаДок", ДатаДок);
	МассивВозврата = Новый Массив;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		
		СтруктураВозврата=Новый Структура;
		СтруктураВозврата.Вставить("Материал", Выборка.Материал);
		СтруктураВозврата.Вставить("Количество",Выборка.Количество);
		
		МассивВозврата.Добавить(СтруктураВозврата);
	КонецЦикла;
	
	Возврат МассивВозврата;
	
КонецФункции

&НаКлиенте
Процедура ВидПродукцииПриИзменении(Элемент)
	Объект.СырьеИМатериалы.Очистить();
	Объект.ВозвратныеОтходы.Очистить();
	Объект.ПризнакИзменения = Ложь;
	НС = ВидПродукцииПриИзмененииНаСервере(Объект.Дата, Объект.ВидПродукции);
	Для Каждого ЭлементМассива Из НС Цикл 
		Если ЭлементМассива.Количество <> 0 Тогда
			Если ЭлементМассива.Количество > 0 Тогда
				СтрМат = Объект.СырьеИМатериалы.Добавить();
				СтрМат.НормаРасхода = ЭлементМассива.Количество;
				СтрМат.Номенклатура = ЭлементМассива.Материал;
				СтрМат.Количество = Объект.ПланируемоеКоличество/1000*ЭлементМассива.Количество;
				СтрМат.ТекущийОстаток = ОстаткиНоменклатуры2(Объект.Дата, Объект.СкладСписанияСырья, ЭлементМассива.Материал);
			ИначеЕсли ЭлементМассива.Количество < 0 Тогда
				СтрокаВозвратныеОтходы = Объект.ВозвратныеОтходы.Добавить();
				СтрокаВозвратныеОтходы.Наименование = ЭлементМассива.Материал;
				СтрокаВозвратныеОтходы.НормаВыхода = -(ЭлементМассива.Количество);
				СтрокаВозвратныеОтходы.Количество = Объект.ПланируемоеКоличество/1000*ЭлементМассива.Количество*-1;
			КонецЕсли
		КонецЕсли;
	КонецЦикла;
	
	ИнформацияОНормахСписания.Параметры.УстановитьЗначениеПараметра("ВидПродукции", Объект.ВидПродукции);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланируемоеКоличествоПриИзменении(Элемент)
	Для Каждого ТекущаяСтрока Из Объект.СырьеИМатериалы Цикл 
		ТекущаяСтрока.Количество = Объект.ПланируемоеКоличество/1000*ТекущаяСтрока.НормаРасхода;
	КонецЦикла;
	
	Для Каждого ТекущаяСтрока Из Объект.ВозвратныеОтходы Цикл
		ТекущаяСтрока.Количество = Объект.ПланируемоеКоличество/1000*ТекущаяСтрока.НормаВыхода;
	КонецЦикла;

	ИнформацияОНормахСписания.Параметры.УстановитьЗначениеПараметра("ПланируемоеКоличество", Объект.ПланируемоеКоличество);

КонецПроцедуры

&НаКлиенте
Процедура ДляМаслаПриИзменении(Элемент)
	Если Объект.ДляМасла Тогда 
		Элементы.ДатаРозлива.Доступность = Истина;
		Элементы.ДатаИзготовления.Доступность = Истина;
	Иначе 
		Элементы.ДатаРозлива.Доступность = Ложь;
		Элементы.ДатаИзготовления.Доступность = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция СкладСписанияСырьяПриИзмененииНаСервере(Номенклатура)
	Возврат ВозвратОстатковВызовСервера.ОстаткиНоменклатуры(Объект.Дата, Объект.СкладСписанияСырья, Номенклатура);
КонецФункции

&НаКлиенте
Процедура СкладСписанияСырьяПриИзменении(Элемент)
	Для Каждого СтрокаМатериалов Из Объект.СырьеИМатериалы Цикл
		СтрокаМатериалов.ТекущийОстаток = СкладСписанияСырьяПриИзмененииНаСервере(СтрокаМатериалов.Номенклатура);
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСырьеИМатериалы

&НаКлиенте
Процедура СырьеИМатериалыПослеУдаления(Элемент)
	Объект.ПризнакИзменения = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СырьеИМатериалыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Объект.ПризнакИзменения = Истина;
	Элемент.ТекущиеДанные.ПризнакИзменения = Истина;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВозвратныеОтходы

&НаКлиенте
Процедура ВозвратныеОтходыПослеУдаления(Элемент)
	Объект.ПризнакИзменения = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	//Объект.ПризнакИзменения = Истина;
	//Если ЗначениеЗаполнено(Элемент.ТекущиеДанные) Тогда
	//	Элемент.ТекущиеДанные.ПризнакИзменения = Истина;
	//КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Объект.ПризнакИзменения = Истина;
	Элемент.ТекущиеДанные.ПризнакИзменения = Истина;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ЛогПасСерв()

	МассивУчетныйхДанных = Новый Массив;
	МассивУчетныйхДанных.Добавить(Константы.АдресДатаМарк.Получить());
	МассивУчетныйхДанных.Добавить(Константы.ЛогинДатаМарк.Получить());
	МассивУчетныйхДанных.Добавить(Константы.ПарольДатаМарк.Получить());
	Возврат МассивУчетныйхДанных;
	
КонецФункции
 

&НаСервере
Функция ОстаткиНоменклатуры2(ОстДата, ОстСклад, ОстНоменклатура)
	Запрос = Новый Запрос;
	Запрос.Текст = 	
	"ВЫБРАТЬ
	|	ТовОстатки.КоличествоОстаток
	|ИЗ
	|	РегистрНакопления.Остатки.Остатки(&ОстДата)
	|КАК 
	|	ТовОстатки
	|ГДЕ
	|	ТовОстатки.Склад = &ОстСклад И
	|	ТовОстатки.Номенклатура = &ОстНоменклатура";
	
	Запрос.УстановитьПараметр("ОстДата", ОстДата);
	Запрос.УстановитьПараметр("ОстСклад", ОстСклад);
	Запрос.УстановитьПараметр("ОстНоменклатура", ОстНоменклатура);
	
	Записи = Запрос.Выполнить().Выбрать();
	Пока Записи.Следующий() Цикл 
		Возврат (Записи.КоличествоОстаток);
	КонецЦикла;
	Возврат 0;
КонецФункции

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИнформацияОНормахСписания.Параметры.УстановитьЗначениеПараметра("ВидПродукции", Объект.ВидПродукции);
	ИнформацияОНормахСписания.Параметры.УстановитьЗначениеПараметра("ПланируемоеКоличество", Объект.ПланируемоеКоличество);
	
    ЭлементОформления = УсловноеОформление.Элементы.Добавить();     
    ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();	
    ПолеОформления.Поле = Новый ПолеКомпоновкиДанных(Элементы.СырьеИМатериалы.Имя); 
    ПолеОформления.Использование = Истина;
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.СырьеИМатериалы.Количество");
    ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Больше;    
	ЭлементОтбора.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Объект.СырьеИМатериалы.ТекущийОстаток");
    ЭлементОтбора.Использование  = Истина;
    ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Красный);
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.НейтральноБирюзовый);
	
	
	Если Объект.ДляМасла Тогда 
		Элементы.ДатаРозлива.Доступность = Истина;
		Элементы.ДатаИзготовления.Доступность = Истина;
	Иначе 
		Элементы.ДатаРозлива.Доступность = Ложь;
		Элементы.ДатаИзготовления.Доступность = Ложь;
	КонецЕсли;	
	Если Параметры.Ключ.Пустая() Тогда
		Объект.Дата = ТекущаяДатаСеанса();
		Объект.СкладСписанияСырья = ПараметрыСеанса.ТекущийПользователь.СкладСырья;
		Объект.СкладПоступленияПродукции = ПараметрыСеанса.ТекущийПользователь.СкладПродукции;
	КонецЕсли;
	
	ТолькоПросмотр = ОбщегоНазначенияСервер.ПроверкаПраваНаРедактированиеДокумента(Объект);	
	
	Если Параметры.Ключ.Проведен Тогда 
		ТолькоПросмотр = Истина;
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Для редактирования сделайте документ НЕПРОВЕДЕННЫМ'");
		Сообщение.Сообщить();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	Если (Объект.ДляМасла = Истина) и (Объект.ДатаРозлива = Дата(1,1,1) или Объект.ДатаИзготовления = Дата(1,1,1)) Тогда
		ТекстСообщения = НСтр("ru='Не введена дата розлива или дата изготовления, или обе. Заполните обед даты или снимете галочку ДЛЯ МАСЛА'");
		ПоказатьПредупреждение(Новый ОписаниеОповещения("ПустойВозврат", ЭтотОбъект), ТекстСообщения);
		Отказ = Истина;
	КонецЕсли;
	Если Объект.ЭтапыПроизводства.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru='НЕ ВВЕДЕН НИ ОДИН ЭТАП ПРОИЗВОДСТВА'");
		ПоказатьПредупреждение(Новый ОписаниеОповещения("ПустойВозврат", ЭтотОбъект), ТекстСообщения);
	КонецЕсли;
	Для Каждого ТекущаяСтрока Из Объект.СырьеИМатериалы Цикл
		РеальныйОстаток = ОстаткиНоменклатуры2(Объект.Дата, Объект.СкладСписанияСырья, ТекущаяСтрока.Номенклатура);
		Если РеальныйОстаток < ТекущаяСтрока.Количество Тогда 
			ПоказатьПредупреждение(Новый ОписаниеОповещения("ПустойВозврат", ЭтотОбъект, Новый Структура("ТекущаяСтрока", ТекущаяСтрока)), СтрШаблон(НСтр("ru='Ошибка. %1 недостаточно на складе.'"), Строка(ТекущаяСтрока.Номенклатура)));
		КонецЕсли;
	КонецЦикла;
	Кол = 0;
	Для Каждого ТекущаяСтрока Из Объект.ЭтапыПроизводства Цикл
		Кол = Кол  + ТекущаяСтрока.КоличествоВыпуска;
	КонецЦикла;
	Если Кол > Объект.ПланируемоеКоличество Тогда
		ПоказатьПредупреждение(Новый ОписаниеОповещения("ПустойВозврат", ЭтотОбъект), НСтр("ru='Выпущено продукции больше чем запланировано. НЕПРАВИЛЬНО списано сырье.'"), 0, "ВНИМАНИЕ");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПустойВозврат(Объект) Экспорт
	Возврат;
КонецПроцедуры

&НаКлиенте
Процедура КонтрольныеЗнакиПриИзменении(Элемент)
	СтрокаДанных = Элементы.КонтрольныеЗнаки.ТекущиеДанные;
	СтрокаДанных.Количество = СтрокаДанных.КонечныйНомер - СтрокаДанных.НачальныйНомер + 1;
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьОтчетПоУКЗ(Команда)
	УчетныеДанные = Новый Массив;
	УчетныеДанные = ЛогПасСерв();
	
	//Логин
	Разделитель = ";";
	Соединение = Новый HTTPСоединение(УчетныеДанные[0],443,,,,,Новый ЗащищенноеСоединениеOpenSSL);
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded; boundary="+Разделитель);
	Запрос = Новый HTTPЗапрос("/auth", Заголовки);
	Запрос.УстановитьТелоИзСтроки("username="+УчетныеДанные[1]+"&password="+УчетныеДанные[2]);
	Ответ = Соединение.ОтправитьДляОбработки(Запрос);
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
	ДанныеПользователя = ПрочитатьJSON(ЧтениеJSON, Ложь);
	//Конец логина
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
	Заголовки.Вставить("Host", УчетныеДанные[0]);
	Заголовки.Вставить("Token", ДанныеПользователя.Token);
	Запрос = Новый HTTPЗапрос("/v2/reports/addUsed", Заголовки);
	
	МассивУКЗ = Новый Массив;
	Для каждого СтрокаУКЗ Из Объект.КонтрольныеЗнаки Цикл
		НачальныйНомер = СтрокаУКЗ.НачальныйНомер; //СтрЗаменить(Строка(СтрокаУКЗ.НачальныйНомер)," ","");
		КонечныйНомер = СтрокаУКЗ.КонечныйНомер; //СтрЗаменить(Строка(СтрокаУКЗ.КонечныйНомер)," ","");
		КоличествоСимволовВНомере = СтрДлина(СтрЗаменить(Строка(СтрокаУКЗ.НачальныйНомер)," ",""));
		Нули = "";
		Пока КоличествоСимволовВНомере < 9 Цикл
			Нули = Нули + "0";
			КоличествоСимволовВНомере = КоличествоСимволовВНомере + 1;
		КонецЦикла; 
		Пока НачальныйНомер <= КонечныйНомер Цикл
			МассивУКЗ.Добавить(СокрЛП(СтрокаУКЗ.Серия)+Нули+СтрЗаменить(Строка(НачальныйНомер)," ", ""));  //"AAA63 997 835"
			НачальныйНомер = НачальныйНомер+1;
		КонецЦикла;
	КонецЦикла; 
	
	СтруктураПараметровJSON = Новый Структура;
	СтруктураПараметровJSON.Вставить("group", "ukz");
	СтруктураПараметровJSON.Вставить("item", "100900000695405");
	СтруктураПараметровJSON.Вставить("labels", МассивУКЗ);

	ВремменныйФайлДляJSON = ПолучитьИмяВременногоФайла("txt");
	ТелоЗапроса = Новый ЗаписьJSON;
	ТелоЗапроса.ОткрытьФайл(ВремменныйФайлДляJSON);
	ЗаписатьJSON(ТелоЗапроса, СтруктураПараметровJSON);
	ТелоЗапроса.Закрыть();
	
	Запрос.УстановитьИмяФайлаТела(ВремменныйФайлДляJSON);
	СтатусПриема = Соединение.ОтправитьДляОбработки(Запрос);
	ЧтениеОтветаJSON = Новый ЧтениеJSON;
	ЧтениеОтветаJSON.УстановитьСтроку(СтатусПриема.ПолучитьТелоКакСтроку());
	ДанныеОтвета = ПрочитатьJSON(ЧтениеОтветаJSON, Ложь);

	//Логаут
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
	Заголовки.Вставить("Host", УчетныеДанные[0]);
	Заголовки.Вставить("Token", ДанныеПользователя.Token);
	Запрос = Новый HTTPЗапрос("/logout", Заголовки);
	ОтветВыхода = Соединение.ОтправитьДляОбработки(Запрос);
	//Конец логаута
	
	//тут надо запись в регистр
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСтатусОтправкиУКЗ(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

#КонецОбласти
